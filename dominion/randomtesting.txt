When first working on the random testers, I had difficulty understanding where to start. I wanted to start with the adventurer card and then build the other testers based on the same format. After struggling to develop the tests, I decided to take a break and review for the midterm. This proved to be incredibly helpful because it forced me to remember the steps in starting a random testser and how to improve it. 

So following what was presented in class, I first recognized what the interface was. Since I was starting with the adventurer card, I looked at the function as a black box to understand what it takes in as what it is supposed to return. The adventurer card functionality takes in a game state and the hand posistion of where the tresurer card exists and ultimately modifies the number of cards in hand, the number of cards in the deck, the number of cards in the discard pile, and the existence of two new treasur cards in the player's hand. After that was identified, I wrote code to generate the random inputs that are needed. In this case a game state and a position of where the adventurer card is needed to be generated. I chose to used a random seed to call the initalize game function so a stable state of the game would be used. Finally I wrote code to handle the behavior and compare with a reference. I created a new state of the game with the same paramaters and then ran playCard on the original state so the adventurer card would be played. I chose to execute in playCard becuase as Alex suggested to me in the last assignment because it would result in higher overall code coverage. After playCard was run, I took the reference state and modified the changed values to what was expected that the adventrer card would do. Finally I compared the two states with asserts.

I repeated this same process for randomtestcard1 and randomtestcard2.


After running the code, I noticed that since the cards that I selected for randomtestcard1 and randomtestcard2 were simple and had little to no conditional statements (coucil room and great hall), I was able to achieve 100% coverage fairly quickly. I was able to acheive 100% coverage for both the council room the great hall card in just 1 run (council room had an if statement, but it is always guaranteed to execute the code). However the adventurer card tester was not able to achieve 100%. For a standard run time of each test I ran 10000 tests however I even tried to increase the number of max tests to 10000000 tests and the percentage covered was 94.74% for both cases. I investigated .gcov file and dicovered that the following line was never called:

  2750438:  594:    if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
    #####:  595:      shuffle(currentPlayer, state);
        -:  596:  	} 

This was because my test never provided an empty deck test case to the tester. I first created a mutant in the if statement so the current code could incorrectly call that line (in the if statement, I replaced the < symbol with a > symbol). Once I determined that this was the fault due to forced breaking, I wanted to modify tester so that case could exist. I attemped to create situation where this was to be true but I noticed difficulties that caused the rest of my tester to fail. Since the shuffle function's randomness is difficult to predict and replicate so creating the oracle to match this behaviour proved to be incredibly difficult. 

Since the card functionality is fairly simple, both the unit tests and the random tests for the cards work well. Both council room and great hall have unit tests and random tests and they both had 100% coverage for their respective functions. When I developed the original unit test I had coverage in mind so I made sure to create the minimum number of runs to get the most funcitonality. However I feel that the random tests would be a greater overall tool to find hidden possible bugs and determine causality because it is able to create weird inputs and test edge cases to ensure that all possible bugs are found.


The following are the added Makefile rules for this projects:
randomtestadventurer.out
  - Compile randomtestadventurer.c and run while writing the output along side the coverage to randomtestadventurer.out
randomtestcard1.out
  - Compile randomtestcard1.c and run while writing the output along side the coverage to randomtestcard1.out
randomtestcard2.out
  - Compile randomtestcard2.c and run while writing the output along side the coverage to randomtestcard2.out
randomtestout
  - Run the above three rule's in their respective order and append file randomtestcoverage.out containing the total coverage
